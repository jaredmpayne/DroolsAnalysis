
public class Reserved {

    public static let keywords: Set<String> = [
        "accumulate",
        "action",
        "activation-group",
        "agenda-group",
        "and",
        "attributes",
        "auto-focus",
        "boolean",
        "byte",
        "calendars",
        "char",
        "class",
        "collect",
        "date-effective",
        "date-expires",
        "declare",
        "dialect",
        "double",
        "duration",
        "enabled",
        "end",
        "entry-point",
        "eval",
        "exists",
        "extend",
        "extends",
        "false",
        "forall",
        "float",
        "from",
        "function",
        "global",
        "import",
        "in",
        "init",
        "instanceof",
        "int",
        "lock-on-active",
        "long",
        "modify",
        "new",
        "no-loop",
        "not",
        "null",
        "or",
        "over",
        "package",
        "query",
        "result",
        "reverse",
        "rule",
        "ruleflow-group",
        "salience",
        "short",
        "super",
        "static",
        "template",
        "then",
        "this",
        "timer",
        "true",
        "void",
        "when"
    ]

    public static let operators: Set<String> = [
        // ".", // TODO: Get this out of punctuators and into operators.
        "?",
        "=",
        "+",
        "-",
        "*",
        "/",
        "%",
        "<<",
        ">>",
        ">>>",
        "+=",
        "-=",
        "*=",
        "/=",
        "%=",
        "&=",
        "|=",
        "^=",
        "<<=",
        ">>=",
        ">>>=",
        // ":=", // TODO: Make ":" possible as a character in both operator and punctuator sets.
        "++",
        "--",
        "&",
        "|",
        "^",
        "~",
        "!",
        "&&",
        "||",
        "==",
        "!=",
        "<",
        ">",
        "<=",
        ">="
    ]

    public static let punctuators: Set<String> = [
        ".", // Technically an operator, but two tokens . * can follow each other in a production.
        "(",
        ")",
        "[",
        "]",
        "{",
        "}",
        ":",
        ",",
        ";",
        "@"
    ]
}
